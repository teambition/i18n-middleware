// Generated by CoffeeScript 1.6.3
(function() {
  var I18nMiddleware, async, fs, i18nMiddleware, mkdirp, path, url, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('graceful-fs');

  url = require('url');

  _ = require('underscore');

  async = require('async');

  mkdirp = require('mkdirp');

  I18nMiddleware = (function() {
    I18nMiddleware.defaultOptions = {
      defaultLocale: 'en',
      cookie: 'lang',
      directory: "" + (process.cwd()) + "/src/locales",
      src: "" + (process.cwd()) + "/src",
      tmp: "" + (process.cwd()) + "/tmp/i18n",
      grepExts: /(\.js|\.html)$/,
      testExts: ['.coffee', '.html'],
      pattern: /\{\{__([\s\S]+?)\}\}/g,
      force: false,
      updateFiles: false
    };

    function I18nMiddleware(options) {
      this.guess = __bind(this.guess, this);
      this.guessLanguage = __bind(this.guessLanguage, this);
      var f, langFiles;
      this.options = _.extend(I18nMiddleware.defaultOptions, options || {});
      if (!this.options.locales) {
        try {
          langFiles = fs.readdirSync(this.options.directory);
          this.options.locales = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = langFiles.length; _i < _len; _i++) {
              f = langFiles[_i];
              _results.push(f.slice(0, +(f.length - path.extname(f).length - 1) + 1 || 9e9));
            }
            return _results;
          })();
        } catch (_error) {
          this.options.locales = [];
        }
      }
      this.init();
    }

    I18nMiddleware.prototype.init = function() {
      return this.loadDict();
    };

    I18nMiddleware.prototype._dict = function(locale, dictPath) {
      var dict, e, k, options, v, _i, _len;
      options = this.options;
      if (dictPath != null) {
        dictPath = path.join(process.cwd(), dictPath);
      }
      try {
        dict = require(path.join(dictPath || options.directory, locale));
      } catch (_error) {
        e = _error;
        dict = {};
      }
      for (k in dict) {
        v = dict[k];
        if (k === '@include') {
          for (_i = 0, _len = v.length; _i < _len; _i++) {
            dictPath = v[_i];
            dict = _.extend(dict, this._dict(locale, dictPath));
          }
        }
      }
      delete dict['@include'];
      return dict;
    };

    I18nMiddleware.prototype.loadDict = function() {
      var locale, locales, options, _i, _len;
      this.dicts = {};
      options = this.options;
      locales = options.locales;
      locales = locales || [this.options.defaultLocale];
      for (_i = 0, _len = locales.length; _i < _len; _i++) {
        locale = locales[_i];
        this.dicts[locale] = this._dict(locale);
      }
      return this.dicts;
    };

    I18nMiddleware.prototype.__ = function(param) {
      var locale, phrase;
      phrase = param.phrase, locale = param.locale;
      return this.dicts[locale][phrase];
    };

    I18nMiddleware.prototype.compile = function(ops, callback) {
      var options, _compile,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      options = this.options;
      ops = ops;
      _compile = function() {
        return fs.readFile(ops.filePath, 'utf8', function(err, content) {
          if (err != null) {
            return callback();
          }
          content = content.replace(options.pattern || /$^/, function(m, code) {
            var result;
            result = _this.__({
              phrase: code,
              locale: ops.lang
            });
            return result || code;
          });
          return mkdirp(path.dirname(ops.destPath), '0755', function(err) {
            if (err != null) {
              return callback();
            }
            return fs.writeFile(ops.destPath, content, 'utf8', callback);
          });
        });
      };
      if (options.force) {
        return _compile();
      }
      return fs.stat(ops.filePath, function(err, srcStat) {
        if (err != null) {
          return callback();
        }
        return fs.stat(ops.destPath, function(err, destStat) {
          if (err) {
            if (err.code === 'ENOENT') {
              return _compile();
            } else {
              return callback();
            }
          } else {
            if (srcStat.mtime > destStat.mtime) {
              return _compile();
            } else {
              return callback();
            }
          }
        });
      });
    };

    I18nMiddleware.prototype.guessLanguage = function(req, res, next) {
      if (res == null) {
        res = null;
      }
      if (next == null) {
        next = function() {};
      }
      this._language = language || I18nMiddleware.guess(req, this.options);
      req.locale = this._language || '';
      return next();
    };

    I18nMiddleware.guess = function(handle, options) {
      var language, languageHeader, _options, _ref, _ref1, _ref2,
        _this = this;
      _options = _.extend(I18nMiddleware.defaultOptions, options || {});
      languageHeader = handle.headers['accept-language'];
      language = null;
      if (_options.cookie != null) {
        if (((_ref = handle.cookies) != null ? _ref.lang : void 0) != null) {
          if (_ref1 = handle.cookies[_options.cookie], __indexOf.call(_options.locales, _ref1) >= 0) {
            language = handle.cookies[_options.cookie];
          }
        } else if (((_ref2 = handle.headers) != null ? _ref2.cookie : void 0) != null) {
          handle.headers.cookie.split(';').every(function(cookieString) {
            var key, val, _ref3;
            _ref3 = cookieString.split('='), key = _ref3[0], val = _ref3[1];
            if (key === _options.cookie) {
              if (__indexOf.call(_options.locales, val) >= 0) {
                language = val;
              }
              return false;
            }
            return true;
          });
        }
      }
      if ((languageHeader != null) && (language == null)) {
        languageHeader.split(',').every(function(l) {
          var lang, subLang;
          lang = l.split(';')[0];
          subLang = lang.split('-')[0];
          if (__indexOf.call(_options.locales, lang) >= 0) {
            language = lang;
            return false;
          }
          if (__indexOf.call(_options.locales, subLang) >= 0) {
            language = subLang;
            return false;
          }
          return true;
        });
      }
      return language || _options.defaultLocale;
    };

    I18nMiddleware.prototype.guess = function(req) {
      this.guessLanguage(req);
      return this._language;
    };

    I18nMiddleware.prototype.middleware = function() {
      var options, _middleware,
        _this = this;
      options = this.options;
      _middleware = function(req, res, next) {
        var lang, matches, pathname, tmpPath;
        lang = _this.guess(req);
        pathname = url.parse(req.url).pathname;
        tmpPath = "" + options.tmp + "/" + lang;
        if (matches = pathname.match(options.grepExts)) {
          return async.each(options.testExts, (function(_ext, _next) {
            var destPath, filePath, fileRelPath, _options;
            fileRelPath = pathname.replace(options.grepExts, _ext);
            filePath = path.join(options.src, fileRelPath);
            destPath = "" + options.tmp + "/" + lang + fileRelPath;
            _options = {
              filePath: filePath,
              destPath: destPath,
              lang: lang
            };
            return _this.compile(_options, _next);
          }), function(err) {
            return next();
          });
        } else {
          return next();
        }
      };
      return _middleware;
    };

    return I18nMiddleware;

  })();

  i18nMiddleware = function(options) {
    var middleware;
    middleware = new I18nMiddleware(options);
    return middleware.middleware();
  };

  i18nMiddleware.I18nMiddleware = I18nMiddleware;

  i18nMiddleware.guessLanguage = function(options) {
    var middleware;
    middleware = new I18nMiddleware(options);
    return middleware.guessLanguage;
  };

  i18nMiddleware.version = '0.0.1';

  module.exports = i18nMiddleware;

}).call(this);
