// Generated by CoffeeScript 1.6.3
(function() {
  var I18nCli, I18nMiddleware, async, errorQuit, exec, findAllFiles, fs, i18n, i18nCli, logger, path, quote, _;

  i18n = require('i18n');

  fs = require('graceful-fs');

  path = require('path');

  exec = require('child_process').exec;

  I18nMiddleware = require('./middleware').I18nMiddleware;

  async = require('async');

  logger = require('graceful-logger');

  _ = require('underscore');

  errorQuit = function() {
    logger.err.apply(logger, arguments);
    return process.exit();
  };

  quote = function(text) {
    return text.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&");
  };

  findAllFiles = function(filePaths, patterns, callback) {
    var filePath, findCmds, findResults, pattern, _i, _j, _len, _len1;
    findCmds = [];
    for (_i = 0, _len = filePaths.length; _i < _len; _i++) {
      filePath = filePaths[_i];
      for (_j = 0, _len1 = patterns.length; _j < _len1; _j++) {
        pattern = patterns[_j];
        findCmds.push("find " + filePath + " -name '" + pattern + "'");
      }
    }
    findResults = [];
    return async.each(findCmds, (function(findCmd, next) {
      return exec(findCmd, function(err, result) {
        if (err != null) {
          return next(err);
        }
        if (result.length > 0) {
          findResults = findResults.concat(result.trim().split("\n"));
        }
        return next();
      });
    }), function(err) {
      return callback(err, findResults);
    });
  };

  I18nCli = (function() {
    function I18nCli(args) {
      this.action = args[0];
      this.args = args.slice(1);
    }

    I18nCli.prototype.run = function() {
      var _ref;
      if (!(this.action && ((_ref = this.action) === 'format' || _ref === 'revert' || _ref === 'compile' || _ref === 'help'))) {
        console.error('Error: params missing');
        this.help();
        return false;
      }
      return this[this.action]();
    };

    I18nCli.prototype.format = function(revert) {
      var $revDict, dict, i, i18nMiddleware, k, lang, raws, revDict, srcs, textExts, v, _i18n;
      if (revert == null) {
        revert = false;
      }
      lang = this.args[0];
      if (lang == null) {
        return errorQuit('missing language option');
      }
      i18nMiddleware = new I18nMiddleware();
      _i18n = i18nMiddleware.i18n;
      dict = _i18n.getCatalog(lang);
      if (!dict) {
        return errorQuit("missing language locales file [" + lang + ".json]");
      }
      srcs = ['src/scripts', 'src/templates'];
      textExts = ['*.coffee', '*.html'];
      revDict = {};
      $revDict = {};
      raws = [];
      for (k in dict) {
        v = dict[k];
        raws.push(v);
        revDict[v] = k;
      }
      raws.sort(function(x, y) {
        return y.length - x.length;
      });
      for (i in raws) {
        v = raws[i];
        $revDict[v] = revDict[v];
      }
      return findAllFiles(srcs, textExts, function(err, files) {
        if (err != null) {
          return errorQuit(err);
        }
        return async.each(files, (function(file, next) {
          return fs.readFile(file, 'utf8', function(err, text) {
            var raw, tag;
            for (raw in $revDict) {
              tag = $revDict[raw];
              if (revert) {
                text = text.replace(new RegExp(quote("{{__" + tag + "}}")), raw);
              } else {
                text = text.replace(new RegExp(raw, 'g'), "{{__" + tag + "}}");
              }
            }
            return fs.writeFile(file, text, next);
          });
        }), function(err) {
          return logger.info("" + (revert ? 'revert' : 'format') + " finish");
        });
      });
    };

    I18nCli.prototype.revert = function() {
      return this.format(true);
    };

    I18nCli.prototype.compile = function() {
      var destDir, directory, i18nMiddleware, ignores, lang, options, src, textExts, _compile, _getDest, _ref;
      _ref = this.args, lang = _ref[0], directory = _ref[1], src = _ref[2], destDir = _ref[3];
      lang = lang || 'all';
      directory = directory || ("" + (process.cwd()) + "/src/locales");
      src = src || 'src';
      destDir = destDir || ("" + (process.cwd()) + "/tmp/i18n");
      ignores = (ignores != null ? ignores.split(',') : void 0) || ['node_modules', 'bower_components', 'bower.json', 'package.json', 'locales', 'images'];
      textExts = ['*.coffee', '*.html'];
      options = {};
      options.force = true;
      options.directory = directory;
      i18nMiddleware = new I18nMiddleware(options);
      _getDest = function(lang, file) {
        return path.join(destDir, lang, file.slice(src.length));
      };
      _compile = function(lang, callback) {
        if (callback == null) {
          callback = function() {};
        }
        return findAllFiles([src], textExts, function(err, files) {
          if (err != null) {
            return errorQuit;
          }
          return async.each(files, (function(file, next) {
            var ignore, _i, _len;
            for (_i = 0, _len = ignores.length; _i < _len; _i++) {
              ignore = ignores[_i];
              if (file.indexOf(path.join(src, ignore)) === 0) {
                return next();
              }
            }
            return i18nMiddleware.compile({
              filePath: file,
              destPath: _getDest(lang, file),
              lang: lang
            }, next);
          }), function(err) {
            return callback(err);
          });
        });
      };
      if (lang === 'all') {
        return fs.readdir(directory, function(err, langFiles) {
          if (err != null) {
            errorQuit(err);
          }
          return async.each(langFiles, (function(langFile, next) {
            return _compile(langFile.slice(0, +(langFile.length - path.extname(langFile).length - 1) + 1 || 9e9), next);
          }), function(err) {
            if (err != null) {
              errorQuit(err);
            }
            return logger.info("i18n compile finish");
          });
        });
      } else {
        return _compile(lang, function(err) {
          if (err != null) {
            errorQuit(err);
          }
          return logger.info("i18n compile finish");
        });
      }
    };

    I18nCli.prototype.help = function() {
      return console.log('Usage: i18n-cli [action] options\n\nActions:\n  compile      compile source files to the chosen language, or compile to any language with [all] option\n  format       auto format raw text to tags\n  revert       revert tags to plain text\n  help         display the help message\n\nOptions:\n  i18n-cli compile [lang]\n\nExample:\n  i18n-cli compile en     # compile source code to English\n  i18n-cli compile all    # compile source code to all language defined in the locales directory\n  i18n-cli format zh-CN   # compile source code which written in Chinese to i18n tags\n  i18n-cli revert zh-CN   # revert i18n tags in source code to plain Chinese');
    };

    return I18nCli;

  })();

  i18nCli = function() {
    i18nCli = new I18nCli(arguments[0]);
    return i18nCli.run();
  };

  module.exports = i18nCli;

}).call(this);
